<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///INIT ATTRITUBE

//Init speed
spd_normal = 4;
spd_run = 6;
spd_roll = 8;
spd_idle = 0;

//Init gravity and something else
grav = 0.55;
//Movex -&gt; quãng đường mà nhân vật di chuyển theo chiều ngang
//Movey -&gt; quãng đường mà nhân vật di chuyển theo chiều dọc
moveX = 0;
moveY = 0;

//Init state
state = "idle";
sprite_index = spr_idle;
my_spd = spd_normal;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE CONTROLER

//Check input
inputW = keyboard_check_pressed(ord("W"));
inputS = keyboard_check_pressed(ord("S"));
inputA = keyboard_check(ord("A"));
inputD = keyboard_check(ord("D"));
inputRels = keyboard_check_released(ord("S"));
inputShift = keyboard_check(vk_shift);
inputspace = keyboard_check_pressed(vk_space)
//Physics
if (moveY &lt; 10)
{
    moveY = min(moveY + grav, 9);
}
//State changing
if state = "idle"{
  sprite_index = spr_idle;
  image_speed = 1/3;
    if (inputW){
        moveY = -12;
    }
    if (inputS){
        state = "crounch"
    }
    if (inputA or inputD){
        state = "move"
    }
}
else if (state == "move"){
    sprite_index = spr_move;
    
    if (inputW) {moveY = -12}
    if (inputShift){my_spd = spd_run;}
    else { my_spd = spd_normal }
    
    moveX = (inputD - inputA) * my_spd;
    
    if (inputD + inputA == 0){state = "idle"}
    if inputspace {
        image_index = 0;
        state = "roll";
    }
}
else if (state == "roll"){
       sprite_index = spr_roll;
       my_spd = spd_roll;
       moveX = (inputD - inputA) *my_spd;
       if (image_index = 5){
           moveX = 0;
           state = "idle";
    }
}
else if (state == "crounch"){
    sprite_index = spr_crounch;
    if (inputRels){
        state = "idle";
    }
}

//Collision checking
if (place_meeting(x, y + moveY, o_ground)){
    while(not place_meeting(x, y+sign(moveY), o_ground)){
        y += sign(moveY);
        }
        moveY = 0;
}
if (place_meeting(x + moveX, y, o_ground)){
    while(not place_meeting(x + sign(moveX), y, o_ground)){
        x += sign(moveX){
        }
        moveX = 0;
   }
}

//Applying movement
x += moveX;
y += moveY;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Image_controler

if (moveX &lt; 0){
    image_xscale = -1;
}
else if (moveX &gt; 0){
    image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0,5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0,100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0,100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0,100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0,200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
